import{cM as a,dd as p,r as n,g as m,ck as g,ch as l,Z as v,a0 as V}from"./GISSearch.9df35164.js";import{f as I,u as H}from"./LayerView.f42db4c4.js";import{i as b}from"./GraphicContainer.cdb71a55.js";import{r as A}from"./BaseGraphicContainer.739822b1.js";import"./index.ec19e11e.js";import"./ProjectWeberRenew.dc78a7b0.js";import"./plugin-vue_export-helper.21dcd24c.js";import"./Container.70584248.js";import"./Utils.84cdda90.js";import"./enums.84480fc7.js";import"./number.dc47462b.js";import"./enums.457e23f9.js";import"./Texture.4f2b846f.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.1af40bea.js";import"./BidiEngine.b9926823.js";import"./alignmentUtils.03ee467b.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.fbb0a594.js";import"./json.da51edc4.js";import"./VertexArrayObject.61e2646f.js";import"./FeatureContainer.d84bf091.js";import"./TileContainer.63ca271e.js";import"./WGLContainer.a7b47613.js";import"./pixelUtils.4fe8b03c.js";import"./ProgramTemplate.3d484ad5.js";import"./StyleDefinition.809d5a5e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./MaterialKey.9a296ace.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.1b971d6a.js";import"./visualVariablesUtils.142de5b6.js";import"./Matcher.fc71ab3e.js";import"./tileUtils.98353ba9.js";import"./TileClipper.d0e9cb99.js";import"./Geometry.e891c191.js";import"./cimAnalyzer.f7c6007c.js";import"./quantizationUtils.4b4d3537.js";import"./ExpandedCIM.fbe66b15.js";import"./schemaUtils.ab969108.js";import"./createSymbolSchema.2db3aa3b.js";import"./MD5.67d7a872.js";import"./util.99649586.js";import"./ComputedAttributeStorage.ad4fab6d.js";import"./vec3f32.8179e08f.js";const d=["routeInfo","directionLines","directionPoints","polygonBarriers","polylineBarriers","pointBarriers","stops"],C=Object.freeze({remove(){},pause(){},resume(){}});let e=class extends I(H){constructor(){super(...arguments),this._graphicsViews=new Map,this._highlightIds=new Map}attach(){for(const i of d)this.handles.add(a(()=>n(this.layer[i])?i==="routeInfo"?[m(this.layer[i])]:m(this.layer[i]).toArray():null,t=>this._createGraphicsView(i,t),p),i)}detach(){this._destroyGraphicsViews()}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof g?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):l.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray()),t=t.filter(s=>s!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):C}async hitTest(i,t){if(this.suspended||!this._graphicsViews.size)return Promise.resolve(null);const s=Array.from(this._graphicsViews.values()).reverse().map(r=>r.hitTest(i)).flat().filter(r=>!!r);for(const r of s)r.layer=this.layer,r.sourceLayer=this.layer;return s}moveStart(){}moveEnd(){}update(i){for(const t of this._graphicsViews.values())t.processUpdate(i)}viewChange(){for(const i of this._graphicsViews.values())i.viewChange()}isUpdating(){for(const i of this._graphicsViews.values())if(i.updating)return!0;return!1}_createGraphicsView(i,t){this._destroyGraphicsView(i);const s=this.view,r=()=>this.requestUpdate(),c=new l(n(t)?t.map(u=>{const{attributes:f,geometry:_,symbol:y,popupInfo:w}=u.toPortalJSON();return g.fromJSON({attributes:f,geometry:_,symbol:y,popupTemplate:w})}):[]),o=new b(s.featuresTilingScheme),h=new A({container:o,graphics:c,requestUpdateCallback:r,view:s});this._graphicsViews.set(i,h),this.container.addChildAt(o,d.indexOf(i)),this._updateHighlight(),this.handles.add([a(()=>h.updating,()=>this.notifyChange("updating"),p)],`updating-${i}`)}_destroyGraphicsView(i){if(!this._graphicsViews.has(i))return;const t=this._graphicsViews.get(i);this.container.removeChild(t.container),t.destroy(),this.handles.remove(`updating-${i}`),this._graphicsViews.delete(i)}_destroyGraphicsViews(){this.container.removeAllChildren();for(const[i,t]of this._graphicsViews.entries())this.handles.remove(i),t.destroy();this._graphicsViews.clear()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t);this._highlightIds.set(t,s+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const s=this._highlightIds.get(t)-1;s===0?this._highlightIds.delete(t):this._highlightIds.set(t,s)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this._graphicsViews.values())t.setHighlight(i)}};e=v([V("esri.views.2d.layers.RouteLayerView2D")],e);const wi=e;export{wi as default};
